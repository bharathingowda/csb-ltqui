{"version":3,"sources":["screens/MainScreen/components/form/index.js","screens/MainScreen/components/card/index.js","screens/MainScreen/index.js","App.js","index.js"],"names":["currentYear","Date","getFullYear","monthsArr","Array","from","length","x","i","month","yearsArr","_x","CForm","cardMonth","cardYear","onUpdateState","cardNumberRef","cardHolderRef","cardDateRef","onCardInputFocus","onCardInputBlur","cardCvv","children","useState","cardNumber","setCardNumber","handleFormChange","event","target","name","value","className","htmlFor","type","autoComplete","onChange","replace","test","trimRight","maxLength","ref","onFocus","e","onBlur","disabled","map","val","index","key","CARDS","visa","amex","mastercard","discover","unionpay","troy","diners","BACKGROUND_IMG","random","Math","floor","cardBackgroundName","Card","cardHolder","isCardFlipped","currentFocusedElm","onCardElementClick","style","setStyle","useCardType","useMemo","re","number","Object","entries","card","pattern","RegExp","match","cardType","useEffect","element","current","width","offsetWidth","height","offsetHeight","transform","offsetLeft","offsetTop","alt","src","onClick","TransitionGroup","component","cardNumberArr","split","forEach","maskCardNumber","CSSTransition","classNames","timeout","SwitchTransition","in-out","out-in","toString","substr","initialState","MainScreen","state","setState","setCurrentFocusedElm","updateStateValues","useCallback","keyName","formFieldsRefObj","useRef","cardDate","focusFormFieldByKey","focus","cardElementsRef","_event","inputName","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8536967d.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\n\nconst currentYear = new Date().getFullYear();\nconst monthsArr = Array.from({ length: 12 }, (x, i) => {\n    const month = i + 1;\n    return month <= 9 ? '0' + month : month;\n});\nconst yearsArr = Array.from({ length: 9 }, (_x, i) => currentYear + i);\n\nexport default function CForm({\n    cardMonth,\n    cardYear,\n    onUpdateState,\n    cardNumberRef,\n    cardHolderRef,\n    cardDateRef,\n    onCardInputFocus,\n    onCardInputBlur,\n    cardCvv,\n    children\n}) {\n    const [cardNumber, setCardNumber] = useState('');\n\n    const handleFormChange = (event) => {\n        const { name, value } = event.target;\n\n        onUpdateState(name, value);\n    };\n\n    // TODO: We can improve the regex check with a better approach like in the card component.\n    const onCardNumberChange = (event) => {\n        let { value, name } = event.target;\n        let cardNumber = value;\n        value = value.replace(/\\D/g, '');\n        if (/^3[47]\\d{0,13}$/.test(value)) {\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^3(?:0[0-5]|[68]\\d)\\d{0,11}$/.test(value)) {\n            // diner's club, 14 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{6})/, '$1 $2 ');\n        } else if (/^\\d{0,16}$/.test(value)) {\n            // regular cc number, 16 digits\n            cardNumber = value\n                .replace(/(\\d{4})/, '$1 ')\n                .replace(/(\\d{4}) (\\d{4})/, '$1 $2 ')\n                .replace(/(\\d{4}) (\\d{4}) (\\d{4})/, '$1 $2 $3 ');\n        }\n\n        setCardNumber(cardNumber.trimRight());\n        onUpdateState(name, cardNumber);\n    };\n\n    const onCvvFocus = (event) => {\n        onUpdateState('isCardFlipped', true);\n    };\n\n    const onCvvBlur = (event) => {\n        onUpdateState('isCardFlipped', false);\n    };\n\n    // NOTE: Currently the cursor on the card number field gets reset if we remove a number, the code bellow was used\n    // in class components, need to transform this to work with functional components.\n    // getSnapshotBeforeUpdate() {\n    //     return this.props.cardNumberRef.current.selectionStart;\n    // }\n\n    // const componentDidUpdate = function (prevProps, prevState, cursorIdx) {\n    //     const node = cardNumberRef.current;\n    //     const { cardNumber: cardNum } = state;\n    //     const { cardNumber: prevCardNum } = prevState;\n    //     if (\n    //         cardNum.length > prevCardNum.length &&\n    //         cardNum[cursorIdx - 1] === ' '\n    //     ) {\n    //         cursorIdx += 1;\n    //     } else if (prevCardNum[cursorIdx - 1] === ' ') {\n    //         cursorIdx -= 1;\n    //     }\n    //     node.selectionStart = node.selectionEnd = cursorIdx;\n    // };\n\n    return (\n        <div className=\"card-form\">\n            <div className=\"card-list\">{children}</div>\n            <div className=\"card-form__inner\">\n                <div className=\"card-input\">\n                    <label htmlFor=\"cardNumber\" className=\"card-input__label\">\n                        Card Number\n                    </label>\n                    <input\n                        type=\"tel\"\n                        name=\"cardNumber\"\n                        className=\"card-input__input\"\n                        autoComplete=\"off\"\n                        onChange={onCardNumberChange}\n                        maxLength=\"19\"\n                        ref={cardNumberRef}\n                        onFocus={(e) => onCardInputFocus(e, 'cardNumber')}\n                        onBlur={onCardInputBlur}\n                        value={cardNumber}\n                    />\n                </div>\n\n                <div className=\"card-input\">\n                    <label htmlFor=\"cardName\" className=\"card-input__label\">\n                        Card Holder\n                    </label>\n                    <input\n                        type=\"text\"\n                        className=\"card-input__input\"\n                        autoComplete=\"off\"\n                        name=\"cardHolder\"\n                        onChange={handleFormChange}\n                        ref={cardHolderRef}\n                        onFocus={(e) => onCardInputFocus(e, 'cardHolder')}\n                        onBlur={onCardInputBlur}\n                    />\n                </div>\n\n                <div className=\"card-form__row\">\n                    <div className=\"card-form__col\">\n                        <div className=\"card-form__group\">\n                            <label\n                                htmlFor=\"cardMonth\"\n                                className=\"card-input__label\"\n                            >\n                                Expiration Date\n                            </label>\n                            <select\n                                className=\"card-input__input -select\"\n                                value={cardMonth}\n                                name=\"cardMonth\"\n                                onChange={handleFormChange}\n                                ref={cardDateRef}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Month\n                                </option>\n\n                                {monthsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                            <select\n                                name=\"cardYear\"\n                                className=\"card-input__input -select\"\n                                value={cardYear}\n                                onChange={handleFormChange}\n                                onFocus={(e) => onCardInputFocus(e, 'cardDate')}\n                                onBlur={onCardInputBlur}\n                            >\n                                <option value=\"\" disabled>\n                                    Year\n                                </option>\n\n                                {yearsArr.map((val, index) => (\n                                    <option key={index} value={val}>\n                                        {val}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n                    </div>\n                    <div className=\"card-form__col -cvv\">\n                        <div className=\"card-input\">\n                            <label\n                                htmlFor=\"cardCvv\"\n                                className=\"card-input__label\"\n                            >\n                                CVV\n                            </label>\n                            <input\n                                type=\"tel\"\n                                className=\"card-input__input\"\n                                maxLength=\"4\"\n                                autoComplete=\"off\"\n                                name=\"cardCvv\"\n                                onChange={handleFormChange}\n                                onFocus={onCvvFocus}\n                                onBlur={onCvvBlur}\n                                ref={cardCvv}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import React, { useState, useEffect, useCallback, useMemo } from \"react\";\nimport {\n  CSSTransition,\n  TransitionGroup,\n  SwitchTransition\n} from \"react-transition-group\";\nimport \"./styles.scss\";\n\nconst CARDS = {\n  visa: \"^4\",\n  amex: \"^(34|37)\",\n  mastercard: \"^5[1-5]\",\n  discover: \"^6011\",\n  unionpay: \"^62\",\n  troy: \"^9792\",\n  diners: \"^(30[0-5]|36)\"\n};\n\nconst cardBackgroundName = () => {\n  let random = Math.floor(Math.random() * 25 + 1);\n  return `${random}.jpeg`;\n};\n\nconst BACKGROUND_IMG = cardBackgroundName();\n\nconst Card = ({\n  cardHolder,\n  cardNumber,\n  cardMonth,\n  cardYear,\n  cardCvv,\n  isCardFlipped,\n  currentFocusedElm,\n  onCardElementClick,\n  cardNumberRef,\n  cardHolderRef,\n  cardDateRef\n}) => {\n  const [style, setStyle] = useState(null);\n\n  const cardType = (cardNumber) => {\n    const number = cardNumber;\n    let re;\n    for (const [card, pattern] of Object.entries(CARDS)) {\n      re = new RegExp(pattern);\n      if (number.match(re) != null) {\n        return card;\n      }\n    }\n\n    return \"visa\"; // default type\n  };\n\n  const useCardType = useMemo(() => {\n    return cardType(cardNumber);\n  }, [cardNumber]);\n\n  const outlineElementStyle = (element) => {\n    return element\n      ? {\n          width: `${element.offsetWidth}px`,\n          height: `${element.offsetHeight}px`,\n          transform: `translateX(${element.offsetLeft}px) translateY(${element.offsetTop}px)`\n        }\n      : null;\n  };\n\n  useEffect(() => {\n    if (currentFocusedElm) {\n      const style = outlineElementStyle(currentFocusedElm.current);\n      setStyle(style);\n    }\n  }, [currentFocusedElm]);\n\n  const maskCardNumber = (cardNumber) => {\n    let cardNumberArr = cardNumber.split(\"\");\n    cardNumberArr.forEach((val, index) => {\n      if (index > 20) {\n        if (cardNumberArr[index] !== \" \") {\n          cardNumberArr[index] = \"*\";\n        }\n      }\n    });\n\n    return cardNumberArr;\n  };\n\n  return (\n    <div className={\"card-item \" + (isCardFlipped ? \"-active\" : \"\")}>\n      <div className=\"card-item__side -front\">\n        <div\n          className={`card-item__focus ${currentFocusedElm ? `-active` : ``}`}\n          style={style}\n        />\n        <div className=\"card-item__cover\">\n          <img\n            alt=\"\"\n            src={`/card-background/${BACKGROUND_IMG}`}\n            className=\"card-item__bg\"\n          />\n        </div>\n\n        <div className=\"card-item__wrapper\">\n          <div className=\"card-item__top\">\n            <img src={\"/chip.png\"} alt=\"\" className=\"card-item__chip\" />\n            <div className=\"card-item__type\">\n              <img\n                alt={useCardType}\n                src={`/card-type/${useCardType}.png`}\n                className=\"card-item__typeImg\"\n              />\n            </div>\n          </div>\n\n          <label\n            className=\"card-item__number\"\n            ref={cardNumberRef}\n            onClick={() => onCardElementClick(\"cardNumber\")}\n          >\n            <TransitionGroup className=\"slide-fade-up\" component=\"div\">\n              {cardNumber ? (\n                maskCardNumber(cardNumber).map((val, index) => (\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={250}\n                    key={index}\n                  >\n                    <div className=\"card-item__numberItem\">{val}</div>\n                  </CSSTransition>\n                ))\n              ) : (\n                <CSSTransition classNames=\"slide-fade-up\" timeout={250}>\n                  <div className=\"card-item__numberItem\">#</div>\n                </CSSTransition>\n              )}\n            </TransitionGroup>\n          </label>\n          <div className=\"card-item__content\">\n            <label\n              className=\"card-item__info\"\n              onClick={() => onCardElementClick(\"cardHolder\")}\n              ref={cardHolderRef}\n            >\n              <div className=\"card-item__holder\">Card Holder</div>\n              <div className=\"card-item__name\">\n                <TransitionGroup component=\"div\" className=\"slide-fade-up\">\n                  {cardHolder === \"FULL NAME\" ? (\n                    <CSSTransition classNames=\"slide-fade-up\" timeout={250}>\n                      <div>FULL NAME</div>\n                    </CSSTransition>\n                  ) : (\n                    cardHolder.split(\"\").map((val, index) => (\n                      <CSSTransition\n                        timeout={250}\n                        classNames=\"slide-fade-right\"\n                        key={index}\n                      >\n                        <span className=\"card-item__nameItem\">{val}</span>\n                      </CSSTransition>\n                    ))\n                  )}\n                </TransitionGroup>\n              </div>\n            </label>\n            <div\n              className=\"card-item__date\"\n              onClick={() => onCardElementClick(\"cardDate\")}\n              ref={cardDateRef}\n            >\n              <label className=\"card-item__dateTitle\">Expires</label>\n              <label className=\"card-item__dateItem\">\n                <SwitchTransition in-out>\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={200}\n                    key={cardMonth}\n                  >\n                    <span>{!cardMonth ? \"MM\" : cardMonth} </span>\n                  </CSSTransition>\n                </SwitchTransition>\n              </label>\n              /\n              <label htmlFor=\"cardYear\" className=\"card-item__dateItem\">\n                <SwitchTransition out-in>\n                  <CSSTransition\n                    classNames=\"slide-fade-up\"\n                    timeout={250}\n                    key={cardYear}\n                  >\n                    <span>\n                      {!cardYear ? \"YY\" : cardYear.toString().substr(-2)}\n                    </span>\n                  </CSSTransition>\n                </SwitchTransition>\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"card-item__side -back\">\n        <div className=\"card-item__cover\">\n          <img\n            alt=\"\"\n            src={`/card-background/${BACKGROUND_IMG}`}\n            className=\"card-item__bg\"\n          />\n        </div>\n        <div className=\"card-item__band\" />\n        <div className=\"card-item__cvv\">\n          <div className=\"card-item__cvvTitle\">CVV</div>\n          <div className=\"card-item__cvvBand\">\n            <TransitionGroup>\n              {cardCvv.split(\"\").map((val, index) => (\n                <CSSTransition\n                  classNames=\"zoom-in-out\"\n                  key={index}\n                  timeout={250}\n                >\n                  <span>*</span>\n                </CSSTransition>\n              ))}\n            </TransitionGroup>\n          </div>\n          <div className=\"card-item__type\">\n            <img\n              alt=\"card-type\"\n              src={\"/card-type/visa.png\"}\n              className=\"card-item__typeImg\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useRef, useCallback } from 'react';\nimport CForm from './components/form';\nimport Card from './components/card';\n\nconst initialState = {\n    cardNumber: '#### #### #### ####',\n    cardHolder: 'FULL NAME',\n    cardMonth: '',\n    cardYear: '',\n    cardCvv: '',\n    isCardFlipped: false\n};\n\nconst MainScreen = () => {\n    const [state, setState] = useState(initialState);\n    const [currentFocusedElm, setCurrentFocusedElm] = useState(null);\n\n    const updateStateValues = useCallback(\n        (keyName, value) => {\n            setState({\n                ...state,\n                [keyName]: value || initialState[keyName]\n            });\n        },\n        [state]\n    );\n\n    // References for the Form Inputs used to focus corresponding inputs.\n    let formFieldsRefObj = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef(),\n        cardCvv: useRef()\n    };\n\n    let focusFormFieldByKey = useCallback((key) => {\n        formFieldsRefObj[key].current.focus();\n    });\n\n    // This are the references for the Card DIV elements.\n    let cardElementsRef = {\n        cardNumber: useRef(),\n        cardHolder: useRef(),\n        cardDate: useRef()\n    };\n\n    let onCardFormInputFocus = (_event, inputName) => {\n        const refByName = cardElementsRef[inputName];\n        setCurrentFocusedElm(refByName);\n    };\n\n    let onCardInputBlur = useCallback(() => {\n        setCurrentFocusedElm(null);\n    }, []);\n\n    return (\n        <div className=\"wrapper\">\n            <CForm\n                cardMonth={state.cardMonth}\n                cardYear={state.cardYear}\n                onUpdateState={updateStateValues}\n                cardNumberRef={formFieldsRefObj.cardNumber}\n                cardHolderRef={formFieldsRefObj.cardHolder}\n                cardDateRef={formFieldsRefObj.cardDate}\n                onCardInputFocus={onCardFormInputFocus}\n                onCardInputBlur={onCardInputBlur}\n            >\n                <Card\n                    cardNumber={state.cardNumber}\n                    cardHolder={state.cardHolder}\n                    cardMonth={state.cardMonth}\n                    cardYear={state.cardYear}\n                    cardCvv={state.cardCvv}\n                    isCardFlipped={state.isCardFlipped}\n                    currentFocusedElm={currentFocusedElm}\n                    onCardElementClick={focusFormFieldByKey}\n                    cardNumberRef={cardElementsRef.cardNumber}\n                    cardHolderRef={cardElementsRef.cardHolder}\n                    cardDateRef={cardElementsRef.cardDate}\n                ></Card>\n            </CForm>\n        </div>\n    );\n};\n\nexport default MainScreen;\n","import React from 'react';\nimport './App.scss';\nimport MainScreen from './screens/MainScreen';\n\nfunction App() {\n    return <MainScreen />;\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}